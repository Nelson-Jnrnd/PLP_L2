-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from parser.y
-----------------------------------------------------------------------------

state 21 contains 8 shift/reduce conflicts.
state 22 contains 8 shift/reduce conflicts.
state 35 contains 8 shift/reduce conflicts.
state 36 contains 8 shift/reduce conflicts.
state 37 contains 8 shift/reduce conflicts.
state 38 contains 8 shift/reduce conflicts.
state 39 contains 8 shift/reduce conflicts.
state 40 contains 8 shift/reduce conflicts.
state 41 contains 8 shift/reduce conflicts.
state 42 contains 8 shift/reduce conflicts.
state 51 contains 1 shift/reduce conflicts and 1 reduce/reduce conflicts.
state 69 contains 8 shift/reduce conflicts and 11 reduce/reduce conflicts.
state 77 contains 8 shift/reduce conflicts.
state 78 contains 8 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Program                           (0)
	Program -> Expr                                    (1)
	Program -> Statement                               (2)
	Statement -> func "(" FuncVars ")" "{" Expr "}"    (3)
	Statement -> func "(" ")" "{" Expr "}"             (4)
	Statement -> var "=" Expr                          (5)
	Expr -> "True"                                     (6)
	Expr -> "False"                                    (7)
	Expr -> let var "=" Expr in Expr                   (8)
	Expr -> case Expr of Paterns "_" ":" Expr          (9)
	Expr -> func "(" Exprs ")"                         (10)
	Expr -> func "(" ")"                               (11)
	Expr -> "-" Expr                                   (12)
	Expr -> Expr "+" Expr                              (13)
	Expr -> Expr "-" Expr                              (14)
	Expr -> Expr "*" Expr                              (15)
	Expr -> Expr "/" Expr                              (16)
	Expr -> Expr "%" Expr                              (17)
	Expr -> Expr "^" Expr                              (18)
	Expr -> "!" Expr                                   (19)
	Expr -> Expr "&" Expr                              (20)
	Expr -> Expr "|" Expr                              (21)
	Expr -> var                                        (22)
	Expr -> Lit                                        (23)
	Exprs -> Expr Exprs                                (24)
	Exprs -> Expr                                      (25)
	Paterns -> Patern Paterns                          (26)
	Paterns -> Patern                                  (27)
	Patern -> Lit ":" Expr                             (28)
	FuncVars -> var FuncVars                           (29)
	FuncVars -> var                                    (30)
	Lit -> int                                         (31)
	Lit -> bool                                        (32)
	Lit -> "[" Expr "," Expr "]"                       (33)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	let            { TLet }
	in             { TIn }
	case           { TCase }
	of             { TOf }
	int            { TInt  $$ }
	bool           { TBool $$ }
	var            { TVar  $$ }
	func           { TFunc $$ }
	"("            { TLParen }
	")"            { TRParen }
	"{"            { TLBrace }
	"}"            { TRBrace }
	"["            { TLBracket }
	"]"            { TRBracket }
	":"            { TColon }
	","            { TComma }
	"_"            { TSym  "_" }
	"="            { TSym  "=" }
	"+"            { TSym  "+" }
	"-"            { TSym  "-" }
	"*"            { TSym  "*" }
	"/"            { TSym  "/" }
	"!"            { TSym  "!" }
	"&"            { TSym  "&" }
	"|"            { TSym  "|" }
	"%"            { TSym  "%" }
	"^"            { TSym  "^" }
	"True"         { TBool True }
	"False"        { TBool False }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Program         rules 1, 2
	Statement       rules 3, 4, 5
	Expr            rules 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23
	Exprs           rules 24, 25
	Paterns         rules 26, 27
	Patern          rule  28
	FuncVars        rules 29, 30
	Lit             rules 31, 32, 33

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parser -> . Program                          (rule 0)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 17
	func           shift, and enter state 18
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Program        goto state 15
	Statement      goto state 16
	Expr           goto state 2
	Lit            goto state 3

State 1

	Program -> . Expr                                   (rule 1)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 2
	Lit            goto state 3

State 2

	Program -> Expr .                                   (rule 1)
	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	"+"            shift, and enter state 27
	"-"            shift, and enter state 28
	"*"            shift, and enter state 29
	"/"            shift, and enter state 30
	"&"            shift, and enter state 31
	"|"            shift, and enter state 32
	"%"            shift, and enter state 33
	"^"            shift, and enter state 34
	%eof           reduce using rule 1


State 3

	Expr -> Lit .                                       (rule 23)

	let            reduce using rule 23
	in             reduce using rule 23
	case           reduce using rule 23
	of             reduce using rule 23
	int            reduce using rule 23
	bool           reduce using rule 23
	var            reduce using rule 23
	func           reduce using rule 23
	")"            reduce using rule 23
	"}"            reduce using rule 23
	"["            reduce using rule 23
	"]"            reduce using rule 23
	","            reduce using rule 23
	"_"            reduce using rule 23
	"+"            reduce using rule 23
	"-"            reduce using rule 23
	"*"            reduce using rule 23
	"/"            reduce using rule 23
	"!"            reduce using rule 23
	"&"            reduce using rule 23
	"|"            reduce using rule 23
	"%"            reduce using rule 23
	"^"            reduce using rule 23
	"True"         reduce using rule 23
	"False"        reduce using rule 23
	%eof           reduce using rule 23


State 4

	Expr -> let . var "=" Expr in Expr                  (rule 8)

	var            shift, and enter state 26


State 5

	Expr -> case . Expr of Paterns "_" ":" Expr         (rule 9)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 25
	Lit            goto state 3

State 6

	Lit -> int .                                        (rule 31)

	let            reduce using rule 31
	in             reduce using rule 31
	case           reduce using rule 31
	of             reduce using rule 31
	int            reduce using rule 31
	bool           reduce using rule 31
	var            reduce using rule 31
	func           reduce using rule 31
	")"            reduce using rule 31
	"}"            reduce using rule 31
	"["            reduce using rule 31
	"]"            reduce using rule 31
	":"            reduce using rule 31
	","            reduce using rule 31
	"_"            reduce using rule 31
	"+"            reduce using rule 31
	"-"            reduce using rule 31
	"*"            reduce using rule 31
	"/"            reduce using rule 31
	"!"            reduce using rule 31
	"&"            reduce using rule 31
	"|"            reduce using rule 31
	"%"            reduce using rule 31
	"^"            reduce using rule 31
	"True"         reduce using rule 31
	"False"        reduce using rule 31
	%eof           reduce using rule 31


State 7

	Lit -> bool .                                       (rule 32)

	let            reduce using rule 32
	in             reduce using rule 32
	case           reduce using rule 32
	of             reduce using rule 32
	int            reduce using rule 32
	bool           reduce using rule 32
	var            reduce using rule 32
	func           reduce using rule 32
	")"            reduce using rule 32
	"}"            reduce using rule 32
	"["            reduce using rule 32
	"]"            reduce using rule 32
	":"            reduce using rule 32
	","            reduce using rule 32
	"_"            reduce using rule 32
	"+"            reduce using rule 32
	"-"            reduce using rule 32
	"*"            reduce using rule 32
	"/"            reduce using rule 32
	"!"            reduce using rule 32
	"&"            reduce using rule 32
	"|"            reduce using rule 32
	"%"            reduce using rule 32
	"^"            reduce using rule 32
	"True"         reduce using rule 32
	"False"        reduce using rule 32
	%eof           reduce using rule 32


State 8

	Expr -> var .                                       (rule 22)

	let            reduce using rule 22
	in             reduce using rule 22
	case           reduce using rule 22
	of             reduce using rule 22
	int            reduce using rule 22
	bool           reduce using rule 22
	var            reduce using rule 22
	func           reduce using rule 22
	")"            reduce using rule 22
	"}"            reduce using rule 22
	"["            reduce using rule 22
	"]"            reduce using rule 22
	","            reduce using rule 22
	"_"            reduce using rule 22
	"+"            reduce using rule 22
	"-"            reduce using rule 22
	"*"            reduce using rule 22
	"/"            reduce using rule 22
	"!"            reduce using rule 22
	"&"            reduce using rule 22
	"|"            reduce using rule 22
	"%"            reduce using rule 22
	"^"            reduce using rule 22
	"True"         reduce using rule 22
	"False"        reduce using rule 22
	%eof           reduce using rule 22


State 9

	Expr -> func . "(" Exprs ")"                        (rule 10)
	Expr -> func . "(" ")"                              (rule 11)

	"("            shift, and enter state 24


State 10

	Lit -> "[" . Expr "," Expr "]"                      (rule 33)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 23
	Lit            goto state 3

State 11

	Expr -> "-" . Expr                                  (rule 12)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 22
	Lit            goto state 3

State 12

	Expr -> "!" . Expr                                  (rule 19)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 21
	Lit            goto state 3

State 13

	Expr -> "True" .                                    (rule 6)

	let            reduce using rule 6
	in             reduce using rule 6
	case           reduce using rule 6
	of             reduce using rule 6
	int            reduce using rule 6
	bool           reduce using rule 6
	var            reduce using rule 6
	func           reduce using rule 6
	")"            reduce using rule 6
	"}"            reduce using rule 6
	"["            reduce using rule 6
	"]"            reduce using rule 6
	","            reduce using rule 6
	"_"            reduce using rule 6
	"+"            reduce using rule 6
	"-"            reduce using rule 6
	"*"            reduce using rule 6
	"/"            reduce using rule 6
	"!"            reduce using rule 6
	"&"            reduce using rule 6
	"|"            reduce using rule 6
	"%"            reduce using rule 6
	"^"            reduce using rule 6
	"True"         reduce using rule 6
	"False"        reduce using rule 6
	%eof           reduce using rule 6


State 14

	Expr -> "False" .                                   (rule 7)

	let            reduce using rule 7
	in             reduce using rule 7
	case           reduce using rule 7
	of             reduce using rule 7
	int            reduce using rule 7
	bool           reduce using rule 7
	var            reduce using rule 7
	func           reduce using rule 7
	")"            reduce using rule 7
	"}"            reduce using rule 7
	"["            reduce using rule 7
	"]"            reduce using rule 7
	","            reduce using rule 7
	"_"            reduce using rule 7
	"+"            reduce using rule 7
	"-"            reduce using rule 7
	"*"            reduce using rule 7
	"/"            reduce using rule 7
	"!"            reduce using rule 7
	"&"            reduce using rule 7
	"|"            reduce using rule 7
	"%"            reduce using rule 7
	"^"            reduce using rule 7
	"True"         reduce using rule 7
	"False"        reduce using rule 7
	%eof           reduce using rule 7


State 15

	%start_parser -> Program .                          (rule 0)

	%eof           accept


State 16

	Program -> Statement .                              (rule 2)

	%eof           reduce using rule 2


State 17

	Statement -> var . "=" Expr                         (rule 5)
	Expr -> var .                                       (rule 22)

	"="            shift, and enter state 20
	"+"            reduce using rule 22
	"-"            reduce using rule 22
	"*"            reduce using rule 22
	"/"            reduce using rule 22
	"&"            reduce using rule 22
	"|"            reduce using rule 22
	"%"            reduce using rule 22
	"^"            reduce using rule 22
	%eof           reduce using rule 22


State 18

	Statement -> func . "(" FuncVars ")" "{" Expr "}"    (rule 3)
	Statement -> func . "(" ")" "{" Expr "}"            (rule 4)
	Expr -> func . "(" Exprs ")"                        (rule 10)
	Expr -> func . "(" ")"                              (rule 11)

	"("            shift, and enter state 19


State 19

	Statement -> func "(" . FuncVars ")" "{" Expr "}"    (rule 3)
	Statement -> func "(" . ")" "{" Expr "}"            (rule 4)
	Expr -> func "(" . Exprs ")"                        (rule 10)
	Expr -> func "(" . ")"                              (rule 11)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 51
	func           shift, and enter state 9
	")"            shift, and enter state 52
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 45
	Exprs          goto state 46
	FuncVars       goto state 50
	Lit            goto state 3

State 20

	Statement -> var "=" . Expr                         (rule 5)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 49
	Lit            goto state 3

State 21

	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> "!" Expr .                                  (rule 19)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	let            reduce using rule 19
	in             reduce using rule 19
	case           reduce using rule 19
	of             reduce using rule 19
	int            reduce using rule 19
	bool           reduce using rule 19
	var            reduce using rule 19
	func           reduce using rule 19
	")"            reduce using rule 19
	"}"            reduce using rule 19
	"["            reduce using rule 19
	"]"            reduce using rule 19
	","            reduce using rule 19
	"_"            reduce using rule 19
	"+"            shift, and enter state 27
			(reduce using rule 19)

	"-"            shift, and enter state 28
			(reduce using rule 19)

	"*"            shift, and enter state 29
			(reduce using rule 19)

	"/"            shift, and enter state 30
			(reduce using rule 19)

	"!"            reduce using rule 19
	"&"            shift, and enter state 31
			(reduce using rule 19)

	"|"            shift, and enter state 32
			(reduce using rule 19)

	"%"            shift, and enter state 33
			(reduce using rule 19)

	"^"            shift, and enter state 34
			(reduce using rule 19)

	"True"         reduce using rule 19
	"False"        reduce using rule 19
	%eof           reduce using rule 19


State 22

	Expr -> "-" Expr .                                  (rule 12)
	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	let            reduce using rule 12
	in             reduce using rule 12
	case           reduce using rule 12
	of             reduce using rule 12
	int            reduce using rule 12
	bool           reduce using rule 12
	var            reduce using rule 12
	func           reduce using rule 12
	")"            reduce using rule 12
	"}"            reduce using rule 12
	"["            reduce using rule 12
	"]"            reduce using rule 12
	","            reduce using rule 12
	"_"            reduce using rule 12
	"+"            shift, and enter state 27
			(reduce using rule 12)

	"-"            shift, and enter state 28
			(reduce using rule 12)

	"*"            shift, and enter state 29
			(reduce using rule 12)

	"/"            shift, and enter state 30
			(reduce using rule 12)

	"!"            reduce using rule 12
	"&"            shift, and enter state 31
			(reduce using rule 12)

	"|"            shift, and enter state 32
			(reduce using rule 12)

	"%"            shift, and enter state 33
			(reduce using rule 12)

	"^"            shift, and enter state 34
			(reduce using rule 12)

	"True"         reduce using rule 12
	"False"        reduce using rule 12
	%eof           reduce using rule 12


State 23

	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)
	Lit -> "[" Expr . "," Expr "]"                      (rule 33)

	","            shift, and enter state 48
	"+"            shift, and enter state 27
	"-"            shift, and enter state 28
	"*"            shift, and enter state 29
	"/"            shift, and enter state 30
	"&"            shift, and enter state 31
	"|"            shift, and enter state 32
	"%"            shift, and enter state 33
	"^"            shift, and enter state 34


State 24

	Expr -> func "(" . Exprs ")"                        (rule 10)
	Expr -> func "(" . ")"                              (rule 11)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	")"            shift, and enter state 47
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 45
	Exprs          goto state 46
	Lit            goto state 3

State 25

	Expr -> case Expr . of Paterns "_" ":" Expr         (rule 9)
	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	of             shift, and enter state 44
	"+"            shift, and enter state 27
	"-"            shift, and enter state 28
	"*"            shift, and enter state 29
	"/"            shift, and enter state 30
	"&"            shift, and enter state 31
	"|"            shift, and enter state 32
	"%"            shift, and enter state 33
	"^"            shift, and enter state 34


State 26

	Expr -> let var . "=" Expr in Expr                  (rule 8)

	"="            shift, and enter state 43


State 27

	Expr -> Expr "+" . Expr                             (rule 13)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 42
	Lit            goto state 3

State 28

	Expr -> Expr "-" . Expr                             (rule 14)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 41
	Lit            goto state 3

State 29

	Expr -> Expr "*" . Expr                             (rule 15)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 40
	Lit            goto state 3

State 30

	Expr -> Expr "/" . Expr                             (rule 16)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 39
	Lit            goto state 3

State 31

	Expr -> Expr "&" . Expr                             (rule 20)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 38
	Lit            goto state 3

State 32

	Expr -> Expr "|" . Expr                             (rule 21)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 37
	Lit            goto state 3

State 33

	Expr -> Expr "%" . Expr                             (rule 17)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 36
	Lit            goto state 3

State 34

	Expr -> Expr "^" . Expr                             (rule 18)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 35
	Lit            goto state 3

State 35

	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr "^" Expr .                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	let            reduce using rule 18
	in             reduce using rule 18
	case           reduce using rule 18
	of             reduce using rule 18
	int            reduce using rule 18
	bool           reduce using rule 18
	var            reduce using rule 18
	func           reduce using rule 18
	")"            reduce using rule 18
	"}"            reduce using rule 18
	"["            reduce using rule 18
	"]"            reduce using rule 18
	","            reduce using rule 18
	"_"            reduce using rule 18
	"+"            shift, and enter state 27
			(reduce using rule 18)

	"-"            shift, and enter state 28
			(reduce using rule 18)

	"*"            shift, and enter state 29
			(reduce using rule 18)

	"/"            shift, and enter state 30
			(reduce using rule 18)

	"!"            reduce using rule 18
	"&"            shift, and enter state 31
			(reduce using rule 18)

	"|"            shift, and enter state 32
			(reduce using rule 18)

	"%"            shift, and enter state 33
			(reduce using rule 18)

	"^"            shift, and enter state 34
			(reduce using rule 18)

	"True"         reduce using rule 18
	"False"        reduce using rule 18
	%eof           reduce using rule 18


State 36

	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr "%" Expr .                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	let            reduce using rule 17
	in             reduce using rule 17
	case           reduce using rule 17
	of             reduce using rule 17
	int            reduce using rule 17
	bool           reduce using rule 17
	var            reduce using rule 17
	func           reduce using rule 17
	")"            reduce using rule 17
	"}"            reduce using rule 17
	"["            reduce using rule 17
	"]"            reduce using rule 17
	","            reduce using rule 17
	"_"            reduce using rule 17
	"+"            shift, and enter state 27
			(reduce using rule 17)

	"-"            shift, and enter state 28
			(reduce using rule 17)

	"*"            shift, and enter state 29
			(reduce using rule 17)

	"/"            shift, and enter state 30
			(reduce using rule 17)

	"!"            reduce using rule 17
	"&"            shift, and enter state 31
			(reduce using rule 17)

	"|"            shift, and enter state 32
			(reduce using rule 17)

	"%"            shift, and enter state 33
			(reduce using rule 17)

	"^"            shift, and enter state 34
			(reduce using rule 17)

	"True"         reduce using rule 17
	"False"        reduce using rule 17
	%eof           reduce using rule 17


State 37

	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)
	Expr -> Expr "|" Expr .                             (rule 21)

	let            reduce using rule 21
	in             reduce using rule 21
	case           reduce using rule 21
	of             reduce using rule 21
	int            reduce using rule 21
	bool           reduce using rule 21
	var            reduce using rule 21
	func           reduce using rule 21
	")"            reduce using rule 21
	"}"            reduce using rule 21
	"["            reduce using rule 21
	"]"            reduce using rule 21
	","            reduce using rule 21
	"_"            reduce using rule 21
	"+"            shift, and enter state 27
			(reduce using rule 21)

	"-"            shift, and enter state 28
			(reduce using rule 21)

	"*"            shift, and enter state 29
			(reduce using rule 21)

	"/"            shift, and enter state 30
			(reduce using rule 21)

	"!"            reduce using rule 21
	"&"            shift, and enter state 31
			(reduce using rule 21)

	"|"            shift, and enter state 32
			(reduce using rule 21)

	"%"            shift, and enter state 33
			(reduce using rule 21)

	"^"            shift, and enter state 34
			(reduce using rule 21)

	"True"         reduce using rule 21
	"False"        reduce using rule 21
	%eof           reduce using rule 21


State 38

	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr "&" Expr .                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	let            reduce using rule 20
	in             reduce using rule 20
	case           reduce using rule 20
	of             reduce using rule 20
	int            reduce using rule 20
	bool           reduce using rule 20
	var            reduce using rule 20
	func           reduce using rule 20
	")"            reduce using rule 20
	"}"            reduce using rule 20
	"["            reduce using rule 20
	"]"            reduce using rule 20
	","            reduce using rule 20
	"_"            reduce using rule 20
	"+"            shift, and enter state 27
			(reduce using rule 20)

	"-"            shift, and enter state 28
			(reduce using rule 20)

	"*"            shift, and enter state 29
			(reduce using rule 20)

	"/"            shift, and enter state 30
			(reduce using rule 20)

	"!"            reduce using rule 20
	"&"            shift, and enter state 31
			(reduce using rule 20)

	"|"            shift, and enter state 32
			(reduce using rule 20)

	"%"            shift, and enter state 33
			(reduce using rule 20)

	"^"            shift, and enter state 34
			(reduce using rule 20)

	"True"         reduce using rule 20
	"False"        reduce using rule 20
	%eof           reduce using rule 20


State 39

	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr "/" Expr .                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	let            reduce using rule 16
	in             reduce using rule 16
	case           reduce using rule 16
	of             reduce using rule 16
	int            reduce using rule 16
	bool           reduce using rule 16
	var            reduce using rule 16
	func           reduce using rule 16
	")"            reduce using rule 16
	"}"            reduce using rule 16
	"["            reduce using rule 16
	"]"            reduce using rule 16
	","            reduce using rule 16
	"_"            reduce using rule 16
	"+"            shift, and enter state 27
			(reduce using rule 16)

	"-"            shift, and enter state 28
			(reduce using rule 16)

	"*"            shift, and enter state 29
			(reduce using rule 16)

	"/"            shift, and enter state 30
			(reduce using rule 16)

	"!"            reduce using rule 16
	"&"            shift, and enter state 31
			(reduce using rule 16)

	"|"            shift, and enter state 32
			(reduce using rule 16)

	"%"            shift, and enter state 33
			(reduce using rule 16)

	"^"            shift, and enter state 34
			(reduce using rule 16)

	"True"         reduce using rule 16
	"False"        reduce using rule 16
	%eof           reduce using rule 16


State 40

	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr "*" Expr .                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	let            reduce using rule 15
	in             reduce using rule 15
	case           reduce using rule 15
	of             reduce using rule 15
	int            reduce using rule 15
	bool           reduce using rule 15
	var            reduce using rule 15
	func           reduce using rule 15
	")"            reduce using rule 15
	"}"            reduce using rule 15
	"["            reduce using rule 15
	"]"            reduce using rule 15
	","            reduce using rule 15
	"_"            reduce using rule 15
	"+"            shift, and enter state 27
			(reduce using rule 15)

	"-"            shift, and enter state 28
			(reduce using rule 15)

	"*"            shift, and enter state 29
			(reduce using rule 15)

	"/"            shift, and enter state 30
			(reduce using rule 15)

	"!"            reduce using rule 15
	"&"            shift, and enter state 31
			(reduce using rule 15)

	"|"            shift, and enter state 32
			(reduce using rule 15)

	"%"            shift, and enter state 33
			(reduce using rule 15)

	"^"            shift, and enter state 34
			(reduce using rule 15)

	"True"         reduce using rule 15
	"False"        reduce using rule 15
	%eof           reduce using rule 15


State 41

	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr "-" Expr .                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	let            reduce using rule 14
	in             reduce using rule 14
	case           reduce using rule 14
	of             reduce using rule 14
	int            reduce using rule 14
	bool           reduce using rule 14
	var            reduce using rule 14
	func           reduce using rule 14
	")"            reduce using rule 14
	"}"            reduce using rule 14
	"["            reduce using rule 14
	"]"            reduce using rule 14
	","            reduce using rule 14
	"_"            reduce using rule 14
	"+"            shift, and enter state 27
			(reduce using rule 14)

	"-"            shift, and enter state 28
			(reduce using rule 14)

	"*"            shift, and enter state 29
			(reduce using rule 14)

	"/"            shift, and enter state 30
			(reduce using rule 14)

	"!"            reduce using rule 14
	"&"            shift, and enter state 31
			(reduce using rule 14)

	"|"            shift, and enter state 32
			(reduce using rule 14)

	"%"            shift, and enter state 33
			(reduce using rule 14)

	"^"            shift, and enter state 34
			(reduce using rule 14)

	"True"         reduce using rule 14
	"False"        reduce using rule 14
	%eof           reduce using rule 14


State 42

	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr "+" Expr .                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	let            reduce using rule 13
	in             reduce using rule 13
	case           reduce using rule 13
	of             reduce using rule 13
	int            reduce using rule 13
	bool           reduce using rule 13
	var            reduce using rule 13
	func           reduce using rule 13
	")"            reduce using rule 13
	"}"            reduce using rule 13
	"["            reduce using rule 13
	"]"            reduce using rule 13
	","            reduce using rule 13
	"_"            reduce using rule 13
	"+"            shift, and enter state 27
			(reduce using rule 13)

	"-"            shift, and enter state 28
			(reduce using rule 13)

	"*"            shift, and enter state 29
			(reduce using rule 13)

	"/"            shift, and enter state 30
			(reduce using rule 13)

	"!"            reduce using rule 13
	"&"            shift, and enter state 31
			(reduce using rule 13)

	"|"            shift, and enter state 32
			(reduce using rule 13)

	"%"            shift, and enter state 33
			(reduce using rule 13)

	"^"            shift, and enter state 34
			(reduce using rule 13)

	"True"         reduce using rule 13
	"False"        reduce using rule 13
	%eof           reduce using rule 13


State 43

	Expr -> let var "=" . Expr in Expr                  (rule 8)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 64
	Lit            goto state 3

State 44

	Expr -> case Expr of . Paterns "_" ":" Expr         (rule 9)

	int            shift, and enter state 6
	bool           shift, and enter state 7
	"["            shift, and enter state 10

	Paterns        goto state 61
	Patern         goto state 62
	Lit            goto state 63

State 45

	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)
	Exprs -> Expr . Exprs                               (rule 24)
	Exprs -> Expr .                                     (rule 25)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	")"            reduce using rule 25
	"["            shift, and enter state 10
	"+"            shift, and enter state 27
	"-"            shift, and enter state 60
	"*"            shift, and enter state 29
	"/"            shift, and enter state 30
	"!"            shift, and enter state 12
	"&"            shift, and enter state 31
	"|"            shift, and enter state 32
	"%"            shift, and enter state 33
	"^"            shift, and enter state 34
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 45
	Exprs          goto state 59
	Lit            goto state 3

State 46

	Expr -> func "(" Exprs . ")"                        (rule 10)

	")"            shift, and enter state 58


State 47

	Expr -> func "(" ")" .                              (rule 11)

	let            reduce using rule 11
	in             reduce using rule 11
	case           reduce using rule 11
	of             reduce using rule 11
	int            reduce using rule 11
	bool           reduce using rule 11
	var            reduce using rule 11
	func           reduce using rule 11
	")"            reduce using rule 11
	"}"            reduce using rule 11
	"["            reduce using rule 11
	"]"            reduce using rule 11
	","            reduce using rule 11
	"_"            reduce using rule 11
	"+"            reduce using rule 11
	"-"            reduce using rule 11
	"*"            reduce using rule 11
	"/"            reduce using rule 11
	"!"            reduce using rule 11
	"&"            reduce using rule 11
	"|"            reduce using rule 11
	"%"            reduce using rule 11
	"^"            reduce using rule 11
	"True"         reduce using rule 11
	"False"        reduce using rule 11
	%eof           reduce using rule 11


State 48

	Lit -> "[" Expr "," . Expr "]"                      (rule 33)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 57
	Lit            goto state 3

State 49

	Statement -> var "=" Expr .                         (rule 5)
	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	"+"            shift, and enter state 27
	"-"            shift, and enter state 28
	"*"            shift, and enter state 29
	"/"            shift, and enter state 30
	"&"            shift, and enter state 31
	"|"            shift, and enter state 32
	"%"            shift, and enter state 33
	"^"            shift, and enter state 34
	%eof           reduce using rule 5


State 50

	Statement -> func "(" FuncVars . ")" "{" Expr "}"    (rule 3)

	")"            shift, and enter state 56


State 51

	Expr -> var .                                       (rule 22)
	FuncVars -> var . FuncVars                          (rule 29)
	FuncVars -> var .                                   (rule 30)

	let            reduce using rule 22
	case           reduce using rule 22
	int            reduce using rule 22
	bool           reduce using rule 22
	var            shift, and enter state 55
			(reduce using rule 22)

	func           reduce using rule 22
	")"            reduce using rule 30
			(reduce using rule 22)

	"["            reduce using rule 22
	"+"            reduce using rule 22
	"-"            reduce using rule 22
	"*"            reduce using rule 22
	"/"            reduce using rule 22
	"!"            reduce using rule 22
	"&"            reduce using rule 22
	"|"            reduce using rule 22
	"%"            reduce using rule 22
	"^"            reduce using rule 22
	"True"         reduce using rule 22
	"False"        reduce using rule 22

	FuncVars       goto state 54

State 52

	Statement -> func "(" ")" . "{" Expr "}"            (rule 4)
	Expr -> func "(" ")" .                              (rule 11)

	"{"            shift, and enter state 53
	"+"            reduce using rule 11
	"-"            reduce using rule 11
	"*"            reduce using rule 11
	"/"            reduce using rule 11
	"&"            reduce using rule 11
	"|"            reduce using rule 11
	"%"            reduce using rule 11
	"^"            reduce using rule 11
	%eof           reduce using rule 11


State 53

	Statement -> func "(" ")" "{" . Expr "}"            (rule 4)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 72
	Lit            goto state 3

State 54

	FuncVars -> var FuncVars .                          (rule 29)

	")"            reduce using rule 29


State 55

	FuncVars -> var . FuncVars                          (rule 29)
	FuncVars -> var .                                   (rule 30)

	var            shift, and enter state 55
	")"            reduce using rule 30

	FuncVars       goto state 54

State 56

	Statement -> func "(" FuncVars ")" . "{" Expr "}"    (rule 3)

	"{"            shift, and enter state 71


State 57

	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)
	Lit -> "[" Expr "," Expr . "]"                      (rule 33)

	"]"            shift, and enter state 70
	"+"            shift, and enter state 27
	"-"            shift, and enter state 28
	"*"            shift, and enter state 29
	"/"            shift, and enter state 30
	"&"            shift, and enter state 31
	"|"            shift, and enter state 32
	"%"            shift, and enter state 33
	"^"            shift, and enter state 34


State 58

	Expr -> func "(" Exprs ")" .                        (rule 10)

	let            reduce using rule 10
	in             reduce using rule 10
	case           reduce using rule 10
	of             reduce using rule 10
	int            reduce using rule 10
	bool           reduce using rule 10
	var            reduce using rule 10
	func           reduce using rule 10
	")"            reduce using rule 10
	"}"            reduce using rule 10
	"["            reduce using rule 10
	"]"            reduce using rule 10
	","            reduce using rule 10
	"_"            reduce using rule 10
	"+"            reduce using rule 10
	"-"            reduce using rule 10
	"*"            reduce using rule 10
	"/"            reduce using rule 10
	"!"            reduce using rule 10
	"&"            reduce using rule 10
	"|"            reduce using rule 10
	"%"            reduce using rule 10
	"^"            reduce using rule 10
	"True"         reduce using rule 10
	"False"        reduce using rule 10
	%eof           reduce using rule 10


State 59

	Exprs -> Expr Exprs .                               (rule 24)

	")"            reduce using rule 24


State 60

	Expr -> "-" . Expr                                  (rule 12)
	Expr -> Expr "-" . Expr                             (rule 14)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 69
	Lit            goto state 3

State 61

	Expr -> case Expr of Paterns . "_" ":" Expr         (rule 9)

	"_"            shift, and enter state 68


State 62

	Paterns -> Patern . Paterns                         (rule 26)
	Paterns -> Patern .                                 (rule 27)

	int            shift, and enter state 6
	bool           shift, and enter state 7
	"["            shift, and enter state 10
	"_"            reduce using rule 27

	Paterns        goto state 67
	Patern         goto state 62
	Lit            goto state 63

State 63

	Patern -> Lit . ":" Expr                            (rule 28)

	":"            shift, and enter state 66


State 64

	Expr -> let var "=" Expr . in Expr                  (rule 8)
	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	in             shift, and enter state 65
	"+"            shift, and enter state 27
	"-"            shift, and enter state 28
	"*"            shift, and enter state 29
	"/"            shift, and enter state 30
	"&"            shift, and enter state 31
	"|"            shift, and enter state 32
	"%"            shift, and enter state 33
	"^"            shift, and enter state 34


State 65

	Expr -> let var "=" Expr in . Expr                  (rule 8)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 77
	Lit            goto state 3

State 66

	Patern -> Lit ":" . Expr                            (rule 28)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 76
	Lit            goto state 3

State 67

	Paterns -> Patern Paterns .                         (rule 26)

	"_"            reduce using rule 26


State 68

	Expr -> case Expr of Paterns "_" . ":" Expr         (rule 9)

	":"            shift, and enter state 75


State 69

	Expr -> "-" Expr .                                  (rule 12)
	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr "-" Expr .                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	let            reduce using rule 14
			(reduce using rule 12)

	case           reduce using rule 14
			(reduce using rule 12)

	int            reduce using rule 14
			(reduce using rule 12)

	bool           reduce using rule 14
			(reduce using rule 12)

	var            reduce using rule 14
			(reduce using rule 12)

	func           reduce using rule 14
			(reduce using rule 12)

	")"            reduce using rule 14
			(reduce using rule 12)

	"["            reduce using rule 14
			(reduce using rule 12)

	"+"            shift, and enter state 27
			(reduce using rule 14)
			(reduce using rule 12)

	"-"            shift, and enter state 28
			(reduce using rule 14)
			(reduce using rule 12)

	"*"            shift, and enter state 29
			(reduce using rule 14)
			(reduce using rule 12)

	"/"            shift, and enter state 30
			(reduce using rule 14)
			(reduce using rule 12)

	"!"            reduce using rule 14
			(reduce using rule 12)

	"&"            shift, and enter state 31
			(reduce using rule 14)
			(reduce using rule 12)

	"|"            shift, and enter state 32
			(reduce using rule 14)
			(reduce using rule 12)

	"%"            shift, and enter state 33
			(reduce using rule 14)
			(reduce using rule 12)

	"^"            shift, and enter state 34
			(reduce using rule 14)
			(reduce using rule 12)

	"True"         reduce using rule 14
			(reduce using rule 12)

	"False"        reduce using rule 14
			(reduce using rule 12)



State 70

	Lit -> "[" Expr "," Expr "]" .                      (rule 33)

	let            reduce using rule 33
	in             reduce using rule 33
	case           reduce using rule 33
	of             reduce using rule 33
	int            reduce using rule 33
	bool           reduce using rule 33
	var            reduce using rule 33
	func           reduce using rule 33
	")"            reduce using rule 33
	"}"            reduce using rule 33
	"["            reduce using rule 33
	"]"            reduce using rule 33
	":"            reduce using rule 33
	","            reduce using rule 33
	"_"            reduce using rule 33
	"+"            reduce using rule 33
	"-"            reduce using rule 33
	"*"            reduce using rule 33
	"/"            reduce using rule 33
	"!"            reduce using rule 33
	"&"            reduce using rule 33
	"|"            reduce using rule 33
	"%"            reduce using rule 33
	"^"            reduce using rule 33
	"True"         reduce using rule 33
	"False"        reduce using rule 33
	%eof           reduce using rule 33


State 71

	Statement -> func "(" FuncVars ")" "{" . Expr "}"    (rule 3)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 74
	Lit            goto state 3

State 72

	Statement -> func "(" ")" "{" Expr . "}"            (rule 4)
	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	"}"            shift, and enter state 73
	"+"            shift, and enter state 27
	"-"            shift, and enter state 28
	"*"            shift, and enter state 29
	"/"            shift, and enter state 30
	"&"            shift, and enter state 31
	"|"            shift, and enter state 32
	"%"            shift, and enter state 33
	"^"            shift, and enter state 34


State 73

	Statement -> func "(" ")" "{" Expr "}" .            (rule 4)

	%eof           reduce using rule 4


State 74

	Statement -> func "(" FuncVars ")" "{" Expr . "}"    (rule 3)
	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	"}"            shift, and enter state 79
	"+"            shift, and enter state 27
	"-"            shift, and enter state 28
	"*"            shift, and enter state 29
	"/"            shift, and enter state 30
	"&"            shift, and enter state 31
	"|"            shift, and enter state 32
	"%"            shift, and enter state 33
	"^"            shift, and enter state 34


State 75

	Expr -> case Expr of Paterns "_" ":" . Expr         (rule 9)

	let            shift, and enter state 4
	case           shift, and enter state 5
	int            shift, and enter state 6
	bool           shift, and enter state 7
	var            shift, and enter state 8
	func           shift, and enter state 9
	"["            shift, and enter state 10
	"-"            shift, and enter state 11
	"!"            shift, and enter state 12
	"True"         shift, and enter state 13
	"False"        shift, and enter state 14

	Expr           goto state 78
	Lit            goto state 3

State 76

	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)
	Patern -> Lit ":" Expr .                            (rule 28)

	int            reduce using rule 28
	bool           reduce using rule 28
	"["            reduce using rule 28
	"_"            reduce using rule 28
	"+"            shift, and enter state 27
	"-"            shift, and enter state 28
	"*"            shift, and enter state 29
	"/"            shift, and enter state 30
	"&"            shift, and enter state 31
	"|"            shift, and enter state 32
	"%"            shift, and enter state 33
	"^"            shift, and enter state 34


State 77

	Expr -> let var "=" Expr in Expr .                  (rule 8)
	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	let            reduce using rule 8
	in             reduce using rule 8
	case           reduce using rule 8
	of             reduce using rule 8
	int            reduce using rule 8
	bool           reduce using rule 8
	var            reduce using rule 8
	func           reduce using rule 8
	")"            reduce using rule 8
	"}"            reduce using rule 8
	"["            reduce using rule 8
	"]"            reduce using rule 8
	","            reduce using rule 8
	"_"            reduce using rule 8
	"+"            shift, and enter state 27
			(reduce using rule 8)

	"-"            shift, and enter state 28
			(reduce using rule 8)

	"*"            shift, and enter state 29
			(reduce using rule 8)

	"/"            shift, and enter state 30
			(reduce using rule 8)

	"!"            reduce using rule 8
	"&"            shift, and enter state 31
			(reduce using rule 8)

	"|"            shift, and enter state 32
			(reduce using rule 8)

	"%"            shift, and enter state 33
			(reduce using rule 8)

	"^"            shift, and enter state 34
			(reduce using rule 8)

	"True"         reduce using rule 8
	"False"        reduce using rule 8
	%eof           reduce using rule 8


State 78

	Expr -> case Expr of Paterns "_" ":" Expr .         (rule 9)
	Expr -> Expr . "+" Expr                             (rule 13)
	Expr -> Expr . "-" Expr                             (rule 14)
	Expr -> Expr . "*" Expr                             (rule 15)
	Expr -> Expr . "/" Expr                             (rule 16)
	Expr -> Expr . "%" Expr                             (rule 17)
	Expr -> Expr . "^" Expr                             (rule 18)
	Expr -> Expr . "&" Expr                             (rule 20)
	Expr -> Expr . "|" Expr                             (rule 21)

	let            reduce using rule 9
	in             reduce using rule 9
	case           reduce using rule 9
	of             reduce using rule 9
	int            reduce using rule 9
	bool           reduce using rule 9
	var            reduce using rule 9
	func           reduce using rule 9
	")"            reduce using rule 9
	"}"            reduce using rule 9
	"["            reduce using rule 9
	"]"            reduce using rule 9
	","            reduce using rule 9
	"_"            reduce using rule 9
	"+"            shift, and enter state 27
			(reduce using rule 9)

	"-"            shift, and enter state 28
			(reduce using rule 9)

	"*"            shift, and enter state 29
			(reduce using rule 9)

	"/"            shift, and enter state 30
			(reduce using rule 9)

	"!"            reduce using rule 9
	"&"            shift, and enter state 31
			(reduce using rule 9)

	"|"            shift, and enter state 32
			(reduce using rule 9)

	"%"            shift, and enter state 33
			(reduce using rule 9)

	"^"            shift, and enter state 34
			(reduce using rule 9)

	"True"         reduce using rule 9
	"False"        reduce using rule 9
	%eof           reduce using rule 9


State 79

	Statement -> func "(" FuncVars ")" "{" Expr "}" .    (rule 3)

	%eof           reduce using rule 3


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 34
Number of terminals: 29
Number of non-terminals: 9
Number of states: 80
