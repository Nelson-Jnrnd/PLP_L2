-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.11 from parser.y
-----------------------------------------------------------------------------

state 48 contains 1 shift/reduce conflicts and 1 reduce/reduce conflicts.
state 66 contains 11 reduce/reduce conflicts.
state 72 contains 1 shift/reduce conflicts.
state 75 contains 8 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Program                           (0)
	Program -> Expr                                    (1)
	Program -> Statement                               (2)
	Statement -> func "(" FuncVars ")" "{" Expr "}"    (3)
	Statement -> func "(" ")" "{" Expr "}"             (4)
	Statement -> var "=" Expr                          (5)
	Expr -> let var "=" Expr in Expr                   (6)
	Expr -> case Expr of Paterns "_" ":" Expr          (7)
	Expr -> func "(" Exprs ")"                         (8)
	Expr -> func "(" ")"                               (9)
	Expr -> "-" Expr                                   (10)
	Expr -> Expr "+" Expr                              (11)
	Expr -> Expr "-" Expr                              (12)
	Expr -> Expr "*" Expr                              (13)
	Expr -> Expr "/" Expr                              (14)
	Expr -> Expr "%" Expr                              (15)
	Expr -> Expr "^" Expr                              (16)
	Expr -> "!" Expr                                   (17)
	Expr -> Expr "&" Expr                              (18)
	Expr -> Expr "|" Expr                              (19)
	Expr -> var                                        (20)
	Expr -> int                                        (21)
	Expr -> bool                                       (22)
	Expr -> "[" Expr "," Expr "]"                      (23)
	Exprs -> Expr Exprs                                (24)
	Exprs -> Expr                                      (25)
	Paterns -> Patern Paterns                          (26)
	Paterns -> Patern                                  (27)
	Patern -> Expr ":" Expr                            (28)
	FuncVars -> var FuncVars                           (29)
	FuncVars -> var                                    (30)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	let            { TLet }
	in             { TIn }
	case           { TCase }
	of             { TOf }
	int            { TInt  $$ }
	bool           { TBool $$ }
	var            { TVar  $$ }
	func           { TFunc $$ }
	"("            { TLParen }
	")"            { TRParen }
	"{"            { TLBrace }
	"}"            { TRBrace }
	"["            { TLBracket }
	"]"            { TRBracket }
	":"            { TColon }
	","            { TComma }
	"_"            { TSym  "_" }
	"="            { TSym  "=" }
	"+"            { TSym  "+" }
	"-"            { TSym  "-" }
	"*"            { TSym  "*" }
	"/"            { TSym  "/" }
	"!"            { TSym  "!" }
	"&"            { TSym  "&" }
	"|"            { TSym  "|" }
	"%"            { TSym  "%" }
	"^"            { TSym  "^" }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Program         rules 1, 2
	Statement       rules 3, 4, 5
	Expr            rules 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23
	Exprs           rules 24, 25
	Paterns         rules 26, 27
	Patern          rule  28
	FuncVars        rules 29, 30

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 14
	func           shift, and enter state 15
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Program        goto state 12
	Statement      goto state 13
	Expr           goto state 2

State 1


	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 2

State 2

	Program -> Expr .                                   (rule 1)
	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	"+"            shift, and enter state 24
	"-"            shift, and enter state 25
	"*"            shift, and enter state 26
	"/"            shift, and enter state 27
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            shift, and enter state 30
	"^"            shift, and enter state 31
	%eof           reduce using rule 1


State 3

	Expr -> let . var "=" Expr in Expr                  (rule 6)

	var            shift, and enter state 23


State 4

	Expr -> case . Expr of Paterns "_" ":" Expr         (rule 7)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 22

State 5

	Expr -> int .                                       (rule 21)

	let            reduce using rule 21
	in             reduce using rule 21
	case           reduce using rule 21
	of             reduce using rule 21
	int            reduce using rule 21
	bool           reduce using rule 21
	var            reduce using rule 21
	func           reduce using rule 21
	")"            reduce using rule 21
	"}"            reduce using rule 21
	"["            reduce using rule 21
	"]"            reduce using rule 21
	":"            reduce using rule 21
	","            reduce using rule 21
	"_"            reduce using rule 21
	"+"            reduce using rule 21
	"-"            reduce using rule 21
	"*"            reduce using rule 21
	"/"            reduce using rule 21
	"!"            reduce using rule 21
	"&"            reduce using rule 21
	"|"            reduce using rule 21
	"%"            reduce using rule 21
	"^"            reduce using rule 21
	%eof           reduce using rule 21


State 6

	Expr -> bool .                                      (rule 22)

	let            reduce using rule 22
	in             reduce using rule 22
	case           reduce using rule 22
	of             reduce using rule 22
	int            reduce using rule 22
	bool           reduce using rule 22
	var            reduce using rule 22
	func           reduce using rule 22
	")"            reduce using rule 22
	"}"            reduce using rule 22
	"["            reduce using rule 22
	"]"            reduce using rule 22
	":"            reduce using rule 22
	","            reduce using rule 22
	"_"            reduce using rule 22
	"+"            reduce using rule 22
	"-"            reduce using rule 22
	"*"            reduce using rule 22
	"/"            reduce using rule 22
	"!"            reduce using rule 22
	"&"            reduce using rule 22
	"|"            reduce using rule 22
	"%"            reduce using rule 22
	"^"            reduce using rule 22
	%eof           reduce using rule 22


State 7

	Expr -> var .                                       (rule 20)

	let            reduce using rule 20
	in             reduce using rule 20
	case           reduce using rule 20
	of             reduce using rule 20
	int            reduce using rule 20
	bool           reduce using rule 20
	var            reduce using rule 20
	func           reduce using rule 20
	")"            reduce using rule 20
	"}"            reduce using rule 20
	"["            reduce using rule 20
	"]"            reduce using rule 20
	":"            reduce using rule 20
	","            reduce using rule 20
	"_"            reduce using rule 20
	"+"            reduce using rule 20
	"-"            reduce using rule 20
	"*"            reduce using rule 20
	"/"            reduce using rule 20
	"!"            reduce using rule 20
	"&"            reduce using rule 20
	"|"            reduce using rule 20
	"%"            reduce using rule 20
	"^"            reduce using rule 20
	%eof           reduce using rule 20


State 8

	Expr -> func . "(" Exprs ")"                        (rule 8)
	Expr -> func . "(" ")"                              (rule 9)

	"("            shift, and enter state 21


State 9

	Expr -> "[" . Expr "," Expr "]"                     (rule 23)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 20

State 10

	Expr -> "-" . Expr                                  (rule 10)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 19

State 11

	Expr -> "!" . Expr                                  (rule 17)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 18

State 12

	%start_parser -> Program .                          (rule 0)

	%eof           accept


State 13

	Program -> Statement .                              (rule 2)

	%eof           reduce using rule 2


State 14

	Statement -> var . "=" Expr                         (rule 5)
	Expr -> var .                                       (rule 20)

	"="            shift, and enter state 17
	"+"            reduce using rule 20
	"-"            reduce using rule 20
	"*"            reduce using rule 20
	"/"            reduce using rule 20
	"&"            reduce using rule 20
	"|"            reduce using rule 20
	"%"            reduce using rule 20
	"^"            reduce using rule 20
	%eof           reduce using rule 20


State 15

	Statement -> func . "(" FuncVars ")" "{" Expr "}"    (rule 3)
	Statement -> func . "(" ")" "{" Expr "}"            (rule 4)
	Expr -> func . "(" Exprs ")"                        (rule 8)
	Expr -> func . "(" ")"                              (rule 9)

	"("            shift, and enter state 16


State 16

	Statement -> func "(" . FuncVars ")" "{" Expr "}"    (rule 3)
	Statement -> func "(" . ")" "{" Expr "}"            (rule 4)
	Expr -> func "(" . Exprs ")"                        (rule 8)
	Expr -> func "(" . ")"                              (rule 9)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 48
	func           shift, and enter state 8
	")"            shift, and enter state 49
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 42
	Exprs          goto state 43
	FuncVars       goto state 47

State 17

	Statement -> var "=" . Expr                         (rule 5)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 46

State 18

	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> "!" Expr .                                  (rule 17)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	let            reduce using rule 17
	in             reduce using rule 17
	case           reduce using rule 17
	of             reduce using rule 17
	int            reduce using rule 17
	bool           reduce using rule 17
	var            reduce using rule 17
	func           reduce using rule 17
	")"            reduce using rule 17
	"}"            reduce using rule 17
	"["            reduce using rule 17
	"]"            reduce using rule 17
	":"            reduce using rule 17
	","            reduce using rule 17
	"_"            reduce using rule 17
	"+"            reduce using rule 17
	"-"            reduce using rule 17
	"*"            reduce using rule 17
	"/"            reduce using rule 17
	"!"            reduce using rule 17
	"&"            reduce using rule 17
	"|"            reduce using rule 17
	"%"            reduce using rule 17
	"^"            reduce using rule 17
	%eof           reduce using rule 17


State 19

	Expr -> "-" Expr .                                  (rule 10)
	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	let            reduce using rule 10
	in             reduce using rule 10
	case           reduce using rule 10
	of             reduce using rule 10
	int            reduce using rule 10
	bool           reduce using rule 10
	var            reduce using rule 10
	func           reduce using rule 10
	")"            reduce using rule 10
	"}"            reduce using rule 10
	"["            reduce using rule 10
	"]"            reduce using rule 10
	":"            reduce using rule 10
	","            reduce using rule 10
	"_"            reduce using rule 10
	"+"            reduce using rule 10
	"-"            reduce using rule 10
	"*"            reduce using rule 10
	"/"            reduce using rule 10
	"!"            reduce using rule 10
	"&"            reduce using rule 10
	"|"            reduce using rule 10
	"%"            reduce using rule 10
	"^"            reduce using rule 10
	%eof           reduce using rule 10


State 20

	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)
	Expr -> "[" Expr . "," Expr "]"                     (rule 23)

	","            shift, and enter state 45
	"+"            shift, and enter state 24
	"-"            shift, and enter state 25
	"*"            shift, and enter state 26
	"/"            shift, and enter state 27
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            shift, and enter state 30
	"^"            shift, and enter state 31


State 21

	Expr -> func "(" . Exprs ")"                        (rule 8)
	Expr -> func "(" . ")"                              (rule 9)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	")"            shift, and enter state 44
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 42
	Exprs          goto state 43

State 22

	Expr -> case Expr . of Paterns "_" ":" Expr         (rule 7)
	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	of             shift, and enter state 41
	"+"            shift, and enter state 24
	"-"            shift, and enter state 25
	"*"            shift, and enter state 26
	"/"            shift, and enter state 27
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            shift, and enter state 30
	"^"            shift, and enter state 31


State 23

	Expr -> let var . "=" Expr in Expr                  (rule 6)

	"="            shift, and enter state 40


State 24

	Expr -> Expr "+" . Expr                             (rule 11)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 39

State 25

	Expr -> Expr "-" . Expr                             (rule 12)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 38

State 26

	Expr -> Expr "*" . Expr                             (rule 13)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 37

State 27

	Expr -> Expr "/" . Expr                             (rule 14)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 36

State 28

	Expr -> Expr "&" . Expr                             (rule 18)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 35

State 29

	Expr -> Expr "|" . Expr                             (rule 19)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 34

State 30

	Expr -> Expr "%" . Expr                             (rule 15)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 33

State 31

	Expr -> Expr "^" . Expr                             (rule 16)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 32

State 32

	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr "^" Expr .                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	let            reduce using rule 16
	in             reduce using rule 16
	case           reduce using rule 16
	of             reduce using rule 16
	int            reduce using rule 16
	bool           reduce using rule 16
	var            reduce using rule 16
	func           reduce using rule 16
	")"            reduce using rule 16
	"}"            reduce using rule 16
	"["            reduce using rule 16
	"]"            reduce using rule 16
	":"            reduce using rule 16
	","            reduce using rule 16
	"_"            reduce using rule 16
	"+"            reduce using rule 16
	"-"            reduce using rule 16
	"*"            reduce using rule 16
	"/"            reduce using rule 16
	"!"            reduce using rule 16
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            reduce using rule 16
	"^"            reduce using rule 16
	%eof           reduce using rule 16


State 33

	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr "%" Expr .                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	let            reduce using rule 15
	in             reduce using rule 15
	case           reduce using rule 15
	of             reduce using rule 15
	int            reduce using rule 15
	bool           reduce using rule 15
	var            reduce using rule 15
	func           reduce using rule 15
	")"            reduce using rule 15
	"}"            reduce using rule 15
	"["            reduce using rule 15
	"]"            reduce using rule 15
	":"            reduce using rule 15
	","            reduce using rule 15
	"_"            reduce using rule 15
	"+"            reduce using rule 15
	"-"            reduce using rule 15
	"*"            reduce using rule 15
	"/"            reduce using rule 15
	"!"            reduce using rule 15
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            reduce using rule 15
	"^"            shift, and enter state 31
	%eof           reduce using rule 15


State 34

	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)
	Expr -> Expr "|" Expr .                             (rule 19)

	let            reduce using rule 19
	in             reduce using rule 19
	case           reduce using rule 19
	of             reduce using rule 19
	int            reduce using rule 19
	bool           reduce using rule 19
	var            reduce using rule 19
	func           reduce using rule 19
	")"            reduce using rule 19
	"}"            reduce using rule 19
	"["            reduce using rule 19
	"]"            reduce using rule 19
	":"            reduce using rule 19
	","            reduce using rule 19
	"_"            reduce using rule 19
	"+"            reduce using rule 19
	"-"            reduce using rule 19
	"*"            reduce using rule 19
	"/"            reduce using rule 19
	"!"            reduce using rule 19
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            reduce using rule 19
	"^"            reduce using rule 19
	%eof           reduce using rule 19


State 35

	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr "&" Expr .                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	let            reduce using rule 18
	in             reduce using rule 18
	case           reduce using rule 18
	of             reduce using rule 18
	int            reduce using rule 18
	bool           reduce using rule 18
	var            reduce using rule 18
	func           reduce using rule 18
	")"            reduce using rule 18
	"}"            reduce using rule 18
	"["            reduce using rule 18
	"]"            reduce using rule 18
	":"            reduce using rule 18
	","            reduce using rule 18
	"_"            reduce using rule 18
	"+"            reduce using rule 18
	"-"            reduce using rule 18
	"*"            reduce using rule 18
	"/"            reduce using rule 18
	"!"            reduce using rule 18
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            reduce using rule 18
	"^"            reduce using rule 18
	%eof           reduce using rule 18


State 36

	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr "/" Expr .                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	let            reduce using rule 14
	in             reduce using rule 14
	case           reduce using rule 14
	of             reduce using rule 14
	int            reduce using rule 14
	bool           reduce using rule 14
	var            reduce using rule 14
	func           reduce using rule 14
	")"            reduce using rule 14
	"}"            reduce using rule 14
	"["            reduce using rule 14
	"]"            reduce using rule 14
	":"            reduce using rule 14
	","            reduce using rule 14
	"_"            reduce using rule 14
	"+"            reduce using rule 14
	"-"            reduce using rule 14
	"*"            reduce using rule 14
	"/"            reduce using rule 14
	"!"            reduce using rule 14
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            shift, and enter state 30
	"^"            shift, and enter state 31
	%eof           reduce using rule 14


State 37

	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr "*" Expr .                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	let            reduce using rule 13
	in             reduce using rule 13
	case           reduce using rule 13
	of             reduce using rule 13
	int            reduce using rule 13
	bool           reduce using rule 13
	var            reduce using rule 13
	func           reduce using rule 13
	")"            reduce using rule 13
	"}"            reduce using rule 13
	"["            reduce using rule 13
	"]"            reduce using rule 13
	":"            reduce using rule 13
	","            reduce using rule 13
	"_"            reduce using rule 13
	"+"            reduce using rule 13
	"-"            reduce using rule 13
	"*"            reduce using rule 13
	"/"            reduce using rule 13
	"!"            reduce using rule 13
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            shift, and enter state 30
	"^"            shift, and enter state 31
	%eof           reduce using rule 13


State 38

	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr "-" Expr .                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	let            reduce using rule 12
	in             reduce using rule 12
	case           reduce using rule 12
	of             reduce using rule 12
	int            reduce using rule 12
	bool           reduce using rule 12
	var            reduce using rule 12
	func           reduce using rule 12
	")"            reduce using rule 12
	"}"            reduce using rule 12
	"["            reduce using rule 12
	"]"            reduce using rule 12
	":"            reduce using rule 12
	","            reduce using rule 12
	"_"            reduce using rule 12
	"+"            reduce using rule 12
	"-"            reduce using rule 12
	"*"            shift, and enter state 26
	"/"            shift, and enter state 27
	"!"            reduce using rule 12
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            shift, and enter state 30
	"^"            shift, and enter state 31
	%eof           reduce using rule 12


State 39

	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr "+" Expr .                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	let            reduce using rule 11
	in             reduce using rule 11
	case           reduce using rule 11
	of             reduce using rule 11
	int            reduce using rule 11
	bool           reduce using rule 11
	var            reduce using rule 11
	func           reduce using rule 11
	")"            reduce using rule 11
	"}"            reduce using rule 11
	"["            reduce using rule 11
	"]"            reduce using rule 11
	":"            reduce using rule 11
	","            reduce using rule 11
	"_"            reduce using rule 11
	"+"            reduce using rule 11
	"-"            reduce using rule 11
	"*"            shift, and enter state 26
	"/"            shift, and enter state 27
	"!"            reduce using rule 11
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            shift, and enter state 30
	"^"            shift, and enter state 31
	%eof           reduce using rule 11


State 40

	Expr -> let var "=" . Expr in Expr                  (rule 6)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 61

State 41

	Expr -> case Expr of . Paterns "_" ":" Expr         (rule 7)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 58
	Paterns        goto state 59
	Patern         goto state 60

State 42

	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)
	Exprs -> Expr . Exprs                               (rule 24)
	Exprs -> Expr .                                     (rule 25)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	")"            reduce using rule 25
	"["            shift, and enter state 9
	"+"            shift, and enter state 24
	"-"            shift, and enter state 57
	"*"            shift, and enter state 26
	"/"            shift, and enter state 27
	"!"            shift, and enter state 11
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            shift, and enter state 30
	"^"            shift, and enter state 31

	Expr           goto state 42
	Exprs          goto state 56

State 43

	Expr -> func "(" Exprs . ")"                        (rule 8)

	")"            shift, and enter state 55


State 44

	Expr -> func "(" ")" .                              (rule 9)

	let            reduce using rule 9
	in             reduce using rule 9
	case           reduce using rule 9
	of             reduce using rule 9
	int            reduce using rule 9
	bool           reduce using rule 9
	var            reduce using rule 9
	func           reduce using rule 9
	")"            reduce using rule 9
	"}"            reduce using rule 9
	"["            reduce using rule 9
	"]"            reduce using rule 9
	":"            reduce using rule 9
	","            reduce using rule 9
	"_"            reduce using rule 9
	"+"            reduce using rule 9
	"-"            reduce using rule 9
	"*"            reduce using rule 9
	"/"            reduce using rule 9
	"!"            reduce using rule 9
	"&"            reduce using rule 9
	"|"            reduce using rule 9
	"%"            reduce using rule 9
	"^"            reduce using rule 9
	%eof           reduce using rule 9


State 45

	Expr -> "[" Expr "," . Expr "]"                     (rule 23)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 54

State 46

	Statement -> var "=" Expr .                         (rule 5)
	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	"+"            shift, and enter state 24
	"-"            shift, and enter state 25
	"*"            shift, and enter state 26
	"/"            shift, and enter state 27
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            shift, and enter state 30
	"^"            shift, and enter state 31
	%eof           reduce using rule 5


State 47

	Statement -> func "(" FuncVars . ")" "{" Expr "}"    (rule 3)

	")"            shift, and enter state 53


State 48

	Expr -> var .                                       (rule 20)
	FuncVars -> var . FuncVars                          (rule 29)
	FuncVars -> var .                                   (rule 30)

	let            reduce using rule 20
	case           reduce using rule 20
	int            reduce using rule 20
	bool           reduce using rule 20
	var            shift, and enter state 52
			(reduce using rule 20)

	func           reduce using rule 20
	")"            reduce using rule 30
			(reduce using rule 20)

	"["            reduce using rule 20
	"+"            reduce using rule 20
	"-"            reduce using rule 20
	"*"            reduce using rule 20
	"/"            reduce using rule 20
	"!"            reduce using rule 20
	"&"            reduce using rule 20
	"|"            reduce using rule 20
	"%"            reduce using rule 20
	"^"            reduce using rule 20

	FuncVars       goto state 51

State 49

	Statement -> func "(" ")" . "{" Expr "}"            (rule 4)
	Expr -> func "(" ")" .                              (rule 9)

	"{"            shift, and enter state 50
	"+"            reduce using rule 9
	"-"            reduce using rule 9
	"*"            reduce using rule 9
	"/"            reduce using rule 9
	"&"            reduce using rule 9
	"|"            reduce using rule 9
	"%"            reduce using rule 9
	"^"            reduce using rule 9
	%eof           reduce using rule 9


State 50

	Statement -> func "(" ")" "{" . Expr "}"            (rule 4)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 69

State 51

	FuncVars -> var FuncVars .                          (rule 29)

	")"            reduce using rule 29


State 52

	FuncVars -> var . FuncVars                          (rule 29)
	FuncVars -> var .                                   (rule 30)

	var            shift, and enter state 52
	")"            reduce using rule 30

	FuncVars       goto state 51

State 53

	Statement -> func "(" FuncVars ")" . "{" Expr "}"    (rule 3)

	"{"            shift, and enter state 68


State 54

	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)
	Expr -> "[" Expr "," Expr . "]"                     (rule 23)

	"]"            shift, and enter state 67
	"+"            shift, and enter state 24
	"-"            shift, and enter state 25
	"*"            shift, and enter state 26
	"/"            shift, and enter state 27
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            shift, and enter state 30
	"^"            shift, and enter state 31


State 55

	Expr -> func "(" Exprs ")" .                        (rule 8)

	let            reduce using rule 8
	in             reduce using rule 8
	case           reduce using rule 8
	of             reduce using rule 8
	int            reduce using rule 8
	bool           reduce using rule 8
	var            reduce using rule 8
	func           reduce using rule 8
	")"            reduce using rule 8
	"}"            reduce using rule 8
	"["            reduce using rule 8
	"]"            reduce using rule 8
	":"            reduce using rule 8
	","            reduce using rule 8
	"_"            reduce using rule 8
	"+"            reduce using rule 8
	"-"            reduce using rule 8
	"*"            reduce using rule 8
	"/"            reduce using rule 8
	"!"            reduce using rule 8
	"&"            reduce using rule 8
	"|"            reduce using rule 8
	"%"            reduce using rule 8
	"^"            reduce using rule 8
	%eof           reduce using rule 8


State 56

	Exprs -> Expr Exprs .                               (rule 24)

	")"            reduce using rule 24


State 57

	Expr -> "-" . Expr                                  (rule 10)
	Expr -> Expr "-" . Expr                             (rule 12)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 66

State 58

	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)
	Patern -> Expr . ":" Expr                           (rule 28)

	":"            shift, and enter state 65
	"+"            shift, and enter state 24
	"-"            shift, and enter state 25
	"*"            shift, and enter state 26
	"/"            shift, and enter state 27
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            shift, and enter state 30
	"^"            shift, and enter state 31


State 59

	Expr -> case Expr of Paterns . "_" ":" Expr         (rule 7)

	"_"            shift, and enter state 64


State 60

	Paterns -> Patern . Paterns                         (rule 26)
	Paterns -> Patern .                                 (rule 27)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"_"            reduce using rule 27
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 58
	Paterns        goto state 63
	Patern         goto state 60

State 61

	Expr -> let var "=" Expr . in Expr                  (rule 6)
	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	in             shift, and enter state 62
	"+"            shift, and enter state 24
	"-"            shift, and enter state 25
	"*"            shift, and enter state 26
	"/"            shift, and enter state 27
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            shift, and enter state 30
	"^"            shift, and enter state 31


State 62

	Expr -> let var "=" Expr in . Expr                  (rule 6)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 74

State 63

	Paterns -> Patern Paterns .                         (rule 26)

	"_"            reduce using rule 26


State 64

	Expr -> case Expr of Paterns "_" . ":" Expr         (rule 7)

	":"            shift, and enter state 73


State 65

	Patern -> Expr ":" . Expr                           (rule 28)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 72

State 66

	Expr -> "-" Expr .                                  (rule 10)
	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr "-" Expr .                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	let            reduce using rule 10
			(reduce using rule 12)

	case           reduce using rule 10
			(reduce using rule 12)

	int            reduce using rule 10
			(reduce using rule 12)

	bool           reduce using rule 10
			(reduce using rule 12)

	var            reduce using rule 10
			(reduce using rule 12)

	func           reduce using rule 10
			(reduce using rule 12)

	")"            reduce using rule 10
			(reduce using rule 12)

	"["            reduce using rule 10
			(reduce using rule 12)

	"+"            reduce using rule 10
			(reduce using rule 12)

	"-"            reduce using rule 10
			(reduce using rule 12)

	"*"            reduce using rule 10
	"/"            reduce using rule 10
	"!"            reduce using rule 10
			(reduce using rule 12)

	"&"            reduce using rule 10
	"|"            reduce using rule 10
	"%"            reduce using rule 10
	"^"            reduce using rule 10


State 67

	Expr -> "[" Expr "," Expr "]" .                     (rule 23)

	let            reduce using rule 23
	in             reduce using rule 23
	case           reduce using rule 23
	of             reduce using rule 23
	int            reduce using rule 23
	bool           reduce using rule 23
	var            reduce using rule 23
	func           reduce using rule 23
	")"            reduce using rule 23
	"}"            reduce using rule 23
	"["            reduce using rule 23
	"]"            reduce using rule 23
	":"            reduce using rule 23
	","            reduce using rule 23
	"_"            reduce using rule 23
	"+"            reduce using rule 23
	"-"            reduce using rule 23
	"*"            reduce using rule 23
	"/"            reduce using rule 23
	"!"            reduce using rule 23
	"&"            reduce using rule 23
	"|"            reduce using rule 23
	"%"            reduce using rule 23
	"^"            reduce using rule 23
	%eof           reduce using rule 23


State 68

	Statement -> func "(" FuncVars ")" "{" . Expr "}"    (rule 3)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 71

State 69

	Statement -> func "(" ")" "{" Expr . "}"            (rule 4)
	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	"}"            shift, and enter state 70
	"+"            shift, and enter state 24
	"-"            shift, and enter state 25
	"*"            shift, and enter state 26
	"/"            shift, and enter state 27
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            shift, and enter state 30
	"^"            shift, and enter state 31


State 70

	Statement -> func "(" ")" "{" Expr "}" .            (rule 4)

	%eof           reduce using rule 4


State 71

	Statement -> func "(" FuncVars ")" "{" Expr . "}"    (rule 3)
	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	"}"            shift, and enter state 76
	"+"            shift, and enter state 24
	"-"            shift, and enter state 25
	"*"            shift, and enter state 26
	"/"            shift, and enter state 27
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            shift, and enter state 30
	"^"            shift, and enter state 31


State 72

	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)
	Patern -> Expr ":" Expr .                           (rule 28)

	let            reduce using rule 28
	case           reduce using rule 28
	int            reduce using rule 28
	bool           reduce using rule 28
	var            reduce using rule 28
	func           reduce using rule 28
	"["            reduce using rule 28
	"_"            reduce using rule 28
	"+"            shift, and enter state 24
	"-"            shift, and enter state 25
			(reduce using rule 28)

	"*"            shift, and enter state 26
	"/"            shift, and enter state 27
	"!"            reduce using rule 28
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            shift, and enter state 30
	"^"            shift, and enter state 31


State 73

	Expr -> case Expr of Paterns "_" ":" . Expr         (rule 7)

	let            shift, and enter state 3
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	"["            shift, and enter state 9
	"-"            shift, and enter state 10
	"!"            shift, and enter state 11

	Expr           goto state 75

State 74

	Expr -> let var "=" Expr in Expr .                  (rule 6)
	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	let            reduce using rule 6
	in             reduce using rule 6
	case           reduce using rule 6
	of             reduce using rule 6
	int            reduce using rule 6
	bool           reduce using rule 6
	var            reduce using rule 6
	func           reduce using rule 6
	")"            reduce using rule 6
	"}"            reduce using rule 6
	"["            reduce using rule 6
	"]"            reduce using rule 6
	":"            reduce using rule 6
	","            reduce using rule 6
	"_"            reduce using rule 6
	"+"            shift, and enter state 24
	"-"            shift, and enter state 25
	"*"            shift, and enter state 26
	"/"            shift, and enter state 27
	"!"            reduce using rule 6
	"&"            shift, and enter state 28
	"|"            shift, and enter state 29
	"%"            shift, and enter state 30
	"^"            shift, and enter state 31
	%eof           reduce using rule 6


State 75

	Expr -> case Expr of Paterns "_" ":" Expr .         (rule 7)
	Expr -> Expr . "+" Expr                             (rule 11)
	Expr -> Expr . "-" Expr                             (rule 12)
	Expr -> Expr . "*" Expr                             (rule 13)
	Expr -> Expr . "/" Expr                             (rule 14)
	Expr -> Expr . "%" Expr                             (rule 15)
	Expr -> Expr . "^" Expr                             (rule 16)
	Expr -> Expr . "&" Expr                             (rule 18)
	Expr -> Expr . "|" Expr                             (rule 19)

	let            reduce using rule 7
	in             reduce using rule 7
	case           reduce using rule 7
	of             reduce using rule 7
	int            reduce using rule 7
	bool           reduce using rule 7
	var            reduce using rule 7
	func           reduce using rule 7
	")"            reduce using rule 7
	"}"            reduce using rule 7
	"["            reduce using rule 7
	"]"            reduce using rule 7
	":"            reduce using rule 7
	","            reduce using rule 7
	"_"            reduce using rule 7
	"+"            shift, and enter state 24
			(reduce using rule 7)

	"-"            shift, and enter state 25
			(reduce using rule 7)

	"*"            shift, and enter state 26
			(reduce using rule 7)

	"/"            shift, and enter state 27
			(reduce using rule 7)

	"!"            reduce using rule 7
	"&"            shift, and enter state 28
			(reduce using rule 7)

	"|"            shift, and enter state 29
			(reduce using rule 7)

	"%"            shift, and enter state 30
			(reduce using rule 7)

	"^"            shift, and enter state 31
			(reduce using rule 7)

	%eof           reduce using rule 7


State 76

	Statement -> func "(" FuncVars ")" "{" Expr "}" .    (rule 3)

	%eof           reduce using rule 3


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 31
Number of terminals: 27
Number of non-terminals: 8
Number of states: 77
