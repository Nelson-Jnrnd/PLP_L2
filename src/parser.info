-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from parser.y
-----------------------------------------------------------------------------

state 37 contains 8 shift/reduce conflicts.
state 41 contains 1 shift/reduce conflicts and 1 reduce/reduce conflicts.
state 60 contains 11 reduce/reduce conflicts.
state 66 contains 1 shift/reduce conflicts.
state 69 contains 8 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Expr                              (0)
	Expr -> let var '=' Expr in Expr                   (1)
	Expr -> case Expr of Paterns '_' ':' Expr          (2)
	Expr -> func '(' Exprs ')'                         (3)
	Expr -> func '(' ')'                               (4)
	Expr -> func '(' FuncVars ')' '{' Expr '}'         (5)
	Expr -> func '(' ')' '{' Expr '}'                  (6)
	Expr -> '-' Expr                                   (7)
	Expr -> Expr '+' Expr                              (8)
	Expr -> Expr '-' Expr                              (9)
	Expr -> Expr '*' Expr                              (10)
	Expr -> Expr '/' Expr                              (11)
	Expr -> Expr '%' Expr                              (12)
	Expr -> Expr '^' Expr                              (13)
	Expr -> '!' Expr                                   (14)
	Expr -> Expr '&' Expr                              (15)
	Expr -> Expr '|' Expr                              (16)
	Expr -> var '=' Expr                               (17)
	Expr -> var                                        (18)
	Expr -> int                                        (19)
	Expr -> bool                                       (20)
	Expr -> '[' Expr ',' Expr ']'                      (21)
	Exprs -> Expr Exprs                                (22)
	Exprs -> Expr                                      (23)
	Paterns -> Patern Paterns                          (24)
	Paterns -> Patern                                  (25)
	Patern -> Expr ':' Expr                            (26)
	FuncVars -> var FuncVars                           (27)
	FuncVars -> var                                    (28)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	let            { TLet }
	in             { TIn }
	case           { TCase }
	of             { TOf }
	int            { TInt  $$ }
	bool           { TBool $$ }
	var            { TVar  $$ }
	func           { TFunc $$ }
	'('            { TLParen }
	')'            { TRParen }
	'{'            { TLBrace }
	'}'            { TRBrace }
	'['            { TLBracket }
	']'            { TRBracket }
	':'            { TColon }
	','            { TComma }
	'_'            { TSym  '_' }
	'='            { TSym  '=' }
	'+'            { TSym  '+' }
	'-'            { TSym  '-' }
	'*'            { TSym  '*' }
	'/'            { TSym  '/' }
	'!'            { TSym  '!' }
	'&'            { TSym  '&' }
	'|'            { TSym  '|' }
	'%'            { TSym  '%' }
	'^'            { TSym  '^' }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Expr            rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21
	Exprs           rules 22, 23
	Paterns         rules 24, 25
	Patern          rule  26
	FuncVars        rules 27, 28

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parser -> . Expr                             (rule 0)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 3

State 1

	Expr -> . let var '=' Expr in Expr                  (rule 1)

	let            shift, and enter state 2


State 2

	Expr -> let . var '=' Expr in Expr                  (rule 1)

	var            shift, and enter state 26


State 3

	%start_parser -> Expr .                             (rule 0)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)

	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            shift, and enter state 24
	'^'            shift, and enter state 25
	%eof           accept


State 4

	Expr -> case . Expr of Paterns '_' ':' Expr         (rule 2)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 17

State 5

	Expr -> int .                                       (rule 19)

	let            reduce using rule 19
	in             reduce using rule 19
	case           reduce using rule 19
	of             reduce using rule 19
	int            reduce using rule 19
	bool           reduce using rule 19
	var            reduce using rule 19
	func           reduce using rule 19
	')'            reduce using rule 19
	'}'            reduce using rule 19
	'['            reduce using rule 19
	']'            reduce using rule 19
	':'            reduce using rule 19
	','            reduce using rule 19
	'_'            reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            reduce using rule 19
	'/'            reduce using rule 19
	'!'            reduce using rule 19
	'&'            reduce using rule 19
	'|'            reduce using rule 19
	'%'            reduce using rule 19
	'^'            reduce using rule 19
	%eof           reduce using rule 19


State 6

	Expr -> bool .                                      (rule 20)

	let            reduce using rule 20
	in             reduce using rule 20
	case           reduce using rule 20
	of             reduce using rule 20
	int            reduce using rule 20
	bool           reduce using rule 20
	var            reduce using rule 20
	func           reduce using rule 20
	')'            reduce using rule 20
	'}'            reduce using rule 20
	'['            reduce using rule 20
	']'            reduce using rule 20
	':'            reduce using rule 20
	','            reduce using rule 20
	'_'            reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	'!'            reduce using rule 20
	'&'            reduce using rule 20
	'|'            reduce using rule 20
	'%'            reduce using rule 20
	'^'            reduce using rule 20
	%eof           reduce using rule 20


State 7

	Expr -> var . '=' Expr                              (rule 17)
	Expr -> var .                                       (rule 18)

	let            reduce using rule 18
	in             reduce using rule 18
	case           reduce using rule 18
	of             reduce using rule 18
	int            reduce using rule 18
	bool           reduce using rule 18
	var            reduce using rule 18
	func           reduce using rule 18
	')'            reduce using rule 18
	'}'            reduce using rule 18
	'['            reduce using rule 18
	']'            reduce using rule 18
	':'            reduce using rule 18
	','            reduce using rule 18
	'_'            reduce using rule 18
	'='            shift, and enter state 16
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	'!'            reduce using rule 18
	'&'            reduce using rule 18
	'|'            reduce using rule 18
	'%'            reduce using rule 18
	'^'            reduce using rule 18
	%eof           reduce using rule 18


State 8

	Expr -> func . '(' Exprs ')'                        (rule 3)
	Expr -> func . '(' ')'                              (rule 4)
	Expr -> func . '(' FuncVars ')' '{' Expr '}'        (rule 5)
	Expr -> func . '(' ')' '{' Expr '}'                 (rule 6)

	'('            shift, and enter state 15


State 9

	Expr -> '[' . Expr ',' Expr ']'                     (rule 21)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 14

State 10

	Expr -> '-' . Expr                                  (rule 7)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 13

State 11

	Expr -> '!' . Expr                                  (rule 14)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 12

State 12

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> '!' Expr .                                  (rule 14)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)

	let            reduce using rule 14
	in             reduce using rule 14
	case           reduce using rule 14
	of             reduce using rule 14
	int            reduce using rule 14
	bool           reduce using rule 14
	var            reduce using rule 14
	func           reduce using rule 14
	')'            reduce using rule 14
	'}'            reduce using rule 14
	'['            reduce using rule 14
	']'            reduce using rule 14
	':'            reduce using rule 14
	','            reduce using rule 14
	'_'            reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'/'            reduce using rule 14
	'!'            reduce using rule 14
	'&'            reduce using rule 14
	'|'            reduce using rule 14
	'%'            reduce using rule 14
	'^'            reduce using rule 14
	%eof           reduce using rule 14


State 13

	Expr -> '-' Expr .                                  (rule 7)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)

	let            reduce using rule 7
	in             reduce using rule 7
	case           reduce using rule 7
	of             reduce using rule 7
	int            reduce using rule 7
	bool           reduce using rule 7
	var            reduce using rule 7
	func           reduce using rule 7
	')'            reduce using rule 7
	'}'            reduce using rule 7
	'['            reduce using rule 7
	']'            reduce using rule 7
	':'            reduce using rule 7
	','            reduce using rule 7
	'_'            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7
	'!'            reduce using rule 7
	'&'            reduce using rule 7
	'|'            reduce using rule 7
	'%'            reduce using rule 7
	'^'            reduce using rule 7
	%eof           reduce using rule 7


State 14

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)
	Expr -> '[' Expr . ',' Expr ']'                     (rule 21)

	','            shift, and enter state 43
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            shift, and enter state 24
	'^'            shift, and enter state 25


State 15

	Expr -> func '(' . Exprs ')'                        (rule 3)
	Expr -> func '(' . ')'                              (rule 4)
	Expr -> func '(' . FuncVars ')' '{' Expr '}'        (rule 5)
	Expr -> func '(' . ')' '{' Expr '}'                 (rule 6)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 41
	func           shift, and enter state 8
	')'            shift, and enter state 42
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 38
	Exprs          goto state 39
	FuncVars       goto state 40

State 16

	Expr -> var '=' . Expr                              (rule 17)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 37

State 17

	Expr -> case Expr . of Paterns '_' ':' Expr         (rule 2)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)

	of             shift, and enter state 36
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            shift, and enter state 24
	'^'            shift, and enter state 25


State 18

	Expr -> Expr '+' . Expr                             (rule 8)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 35

State 19

	Expr -> Expr '-' . Expr                             (rule 9)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 34

State 20

	Expr -> Expr '*' . Expr                             (rule 10)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 33

State 21

	Expr -> Expr '/' . Expr                             (rule 11)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 32

State 22

	Expr -> Expr '&' . Expr                             (rule 15)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 31

State 23

	Expr -> Expr '|' . Expr                             (rule 16)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 30

State 24

	Expr -> Expr '%' . Expr                             (rule 12)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 29

State 25

	Expr -> Expr '^' . Expr                             (rule 13)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 28

State 26

	Expr -> let var . '=' Expr in Expr                  (rule 1)

	'='            shift, and enter state 27


State 27

	Expr -> let var '=' . Expr in Expr                  (rule 1)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 55

State 28

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr '^' Expr .                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)

	let            reduce using rule 13
	in             reduce using rule 13
	case           reduce using rule 13
	of             reduce using rule 13
	int            reduce using rule 13
	bool           reduce using rule 13
	var            reduce using rule 13
	func           reduce using rule 13
	')'            reduce using rule 13
	'}'            reduce using rule 13
	'['            reduce using rule 13
	']'            reduce using rule 13
	':'            reduce using rule 13
	','            reduce using rule 13
	'_'            reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'/'            reduce using rule 13
	'!'            reduce using rule 13
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            reduce using rule 13
	'^'            reduce using rule 13
	%eof           reduce using rule 13


State 29

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr '%' Expr .                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)

	let            reduce using rule 12
	in             reduce using rule 12
	case           reduce using rule 12
	of             reduce using rule 12
	int            reduce using rule 12
	bool           reduce using rule 12
	var            reduce using rule 12
	func           reduce using rule 12
	')'            reduce using rule 12
	'}'            reduce using rule 12
	'['            reduce using rule 12
	']'            reduce using rule 12
	':'            reduce using rule 12
	','            reduce using rule 12
	'_'            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	'!'            reduce using rule 12
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            reduce using rule 12
	'^'            shift, and enter state 25
	%eof           reduce using rule 12


State 30

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)
	Expr -> Expr '|' Expr .                             (rule 16)

	let            reduce using rule 16
	in             reduce using rule 16
	case           reduce using rule 16
	of             reduce using rule 16
	int            reduce using rule 16
	bool           reduce using rule 16
	var            reduce using rule 16
	func           reduce using rule 16
	')'            reduce using rule 16
	'}'            reduce using rule 16
	'['            reduce using rule 16
	']'            reduce using rule 16
	':'            reduce using rule 16
	','            reduce using rule 16
	'_'            reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'/'            reduce using rule 16
	'!'            reduce using rule 16
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            reduce using rule 16
	'^'            reduce using rule 16
	%eof           reduce using rule 16


State 31

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr '&' Expr .                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)

	let            reduce using rule 15
	in             reduce using rule 15
	case           reduce using rule 15
	of             reduce using rule 15
	int            reduce using rule 15
	bool           reduce using rule 15
	var            reduce using rule 15
	func           reduce using rule 15
	')'            reduce using rule 15
	'}'            reduce using rule 15
	'['            reduce using rule 15
	']'            reduce using rule 15
	':'            reduce using rule 15
	','            reduce using rule 15
	'_'            reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	'!'            reduce using rule 15
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            reduce using rule 15
	'^'            reduce using rule 15
	%eof           reduce using rule 15


State 32

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr '/' Expr .                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)

	let            reduce using rule 11
	in             reduce using rule 11
	case           reduce using rule 11
	of             reduce using rule 11
	int            reduce using rule 11
	bool           reduce using rule 11
	var            reduce using rule 11
	func           reduce using rule 11
	')'            reduce using rule 11
	'}'            reduce using rule 11
	'['            reduce using rule 11
	']'            reduce using rule 11
	':'            reduce using rule 11
	','            reduce using rule 11
	'_'            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	'!'            reduce using rule 11
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            shift, and enter state 24
	'^'            shift, and enter state 25
	%eof           reduce using rule 11


State 33

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr '*' Expr .                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)

	let            reduce using rule 10
	in             reduce using rule 10
	case           reduce using rule 10
	of             reduce using rule 10
	int            reduce using rule 10
	bool           reduce using rule 10
	var            reduce using rule 10
	func           reduce using rule 10
	')'            reduce using rule 10
	'}'            reduce using rule 10
	'['            reduce using rule 10
	']'            reduce using rule 10
	':'            reduce using rule 10
	','            reduce using rule 10
	'_'            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	'!'            reduce using rule 10
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            shift, and enter state 24
	'^'            shift, and enter state 25
	%eof           reduce using rule 10


State 34

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr '-' Expr .                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)

	let            reduce using rule 9
	in             reduce using rule 9
	case           reduce using rule 9
	of             reduce using rule 9
	int            reduce using rule 9
	bool           reduce using rule 9
	var            reduce using rule 9
	func           reduce using rule 9
	')'            reduce using rule 9
	'}'            reduce using rule 9
	'['            reduce using rule 9
	']'            reduce using rule 9
	':'            reduce using rule 9
	','            reduce using rule 9
	'_'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	'!'            reduce using rule 9
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            shift, and enter state 24
	'^'            shift, and enter state 25
	%eof           reduce using rule 9


State 35

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr '+' Expr .                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)

	let            reduce using rule 8
	in             reduce using rule 8
	case           reduce using rule 8
	of             reduce using rule 8
	int            reduce using rule 8
	bool           reduce using rule 8
	var            reduce using rule 8
	func           reduce using rule 8
	')'            reduce using rule 8
	'}'            reduce using rule 8
	'['            reduce using rule 8
	']'            reduce using rule 8
	':'            reduce using rule 8
	','            reduce using rule 8
	'_'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	'!'            reduce using rule 8
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            shift, and enter state 24
	'^'            shift, and enter state 25
	%eof           reduce using rule 8


State 36

	Expr -> case Expr of . Paterns '_' ':' Expr         (rule 2)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 52
	Paterns        goto state 53
	Patern         goto state 54

State 37

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)
	Expr -> var '=' Expr .                              (rule 17)

	let            reduce using rule 17
	in             reduce using rule 17
	case           reduce using rule 17
	of             reduce using rule 17
	int            reduce using rule 17
	bool           reduce using rule 17
	var            reduce using rule 17
	func           reduce using rule 17
	')'            reduce using rule 17
	'}'            reduce using rule 17
	'['            reduce using rule 17
	']'            reduce using rule 17
	':'            reduce using rule 17
	','            reduce using rule 17
	'_'            reduce using rule 17
	'+'            shift, and enter state 18
			(reduce using rule 17)

	'-'            shift, and enter state 19
			(reduce using rule 17)

	'*'            shift, and enter state 20
			(reduce using rule 17)

	'/'            shift, and enter state 21
			(reduce using rule 17)

	'!'            reduce using rule 17
	'&'            shift, and enter state 22
			(reduce using rule 17)

	'|'            shift, and enter state 23
			(reduce using rule 17)

	'%'            shift, and enter state 24
			(reduce using rule 17)

	'^'            shift, and enter state 25
			(reduce using rule 17)

	%eof           reduce using rule 17


State 38

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)
	Exprs -> Expr . Exprs                               (rule 22)
	Exprs -> Expr .                                     (rule 23)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	')'            reduce using rule 23
	'['            shift, and enter state 9
	'+'            shift, and enter state 18
	'-'            shift, and enter state 51
	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	'!'            shift, and enter state 11
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            shift, and enter state 24
	'^'            shift, and enter state 25

	Expr           goto state 38
	Exprs          goto state 50

State 39

	Expr -> func '(' Exprs . ')'                        (rule 3)

	')'            shift, and enter state 49


State 40

	Expr -> func '(' FuncVars . ')' '{' Expr '}'        (rule 5)

	')'            shift, and enter state 48


State 41

	Expr -> var . '=' Expr                              (rule 17)
	Expr -> var .                                       (rule 18)
	FuncVars -> var . FuncVars                          (rule 27)
	FuncVars -> var .                                   (rule 28)

	let            reduce using rule 18
	case           reduce using rule 18
	int            reduce using rule 18
	bool           reduce using rule 18
	var            shift, and enter state 47
			(reduce using rule 18)

	func           reduce using rule 18
	')'            reduce using rule 28
			(reduce using rule 18)

	'['            reduce using rule 18
	'='            shift, and enter state 16
	'+'            reduce using rule 18
	'-'            reduce using rule 18
	'*'            reduce using rule 18
	'/'            reduce using rule 18
	'!'            reduce using rule 18
	'&'            reduce using rule 18
	'|'            reduce using rule 18
	'%'            reduce using rule 18
	'^'            reduce using rule 18

	FuncVars       goto state 46

State 42

	Expr -> func '(' ')' .                              (rule 4)
	Expr -> func '(' ')' . '{' Expr '}'                 (rule 6)

	let            reduce using rule 4
	in             reduce using rule 4
	case           reduce using rule 4
	of             reduce using rule 4
	int            reduce using rule 4
	bool           reduce using rule 4
	var            reduce using rule 4
	func           reduce using rule 4
	')'            reduce using rule 4
	'{'            shift, and enter state 45
	'}'            reduce using rule 4
	'['            reduce using rule 4
	']'            reduce using rule 4
	':'            reduce using rule 4
	','            reduce using rule 4
	'_'            reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'/'            reduce using rule 4
	'!'            reduce using rule 4
	'&'            reduce using rule 4
	'|'            reduce using rule 4
	'%'            reduce using rule 4
	'^'            reduce using rule 4
	%eof           reduce using rule 4


State 43

	Expr -> '[' Expr ',' . Expr ']'                     (rule 21)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 44

State 44

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)
	Expr -> '[' Expr ',' Expr . ']'                     (rule 21)

	']'            shift, and enter state 63
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            shift, and enter state 24
	'^'            shift, and enter state 25


State 45

	Expr -> func '(' ')' '{' . Expr '}'                 (rule 6)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 62

State 46

	FuncVars -> var FuncVars .                          (rule 27)

	')'            reduce using rule 27


State 47

	FuncVars -> var . FuncVars                          (rule 27)
	FuncVars -> var .                                   (rule 28)

	var            shift, and enter state 47
	')'            reduce using rule 28

	FuncVars       goto state 46

State 48

	Expr -> func '(' FuncVars ')' . '{' Expr '}'        (rule 5)

	'{'            shift, and enter state 61


State 49

	Expr -> func '(' Exprs ')' .                        (rule 3)

	let            reduce using rule 3
	in             reduce using rule 3
	case           reduce using rule 3
	of             reduce using rule 3
	int            reduce using rule 3
	bool           reduce using rule 3
	var            reduce using rule 3
	func           reduce using rule 3
	')'            reduce using rule 3
	'}'            reduce using rule 3
	'['            reduce using rule 3
	']'            reduce using rule 3
	':'            reduce using rule 3
	','            reduce using rule 3
	'_'            reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            reduce using rule 3
	'/'            reduce using rule 3
	'!'            reduce using rule 3
	'&'            reduce using rule 3
	'|'            reduce using rule 3
	'%'            reduce using rule 3
	'^'            reduce using rule 3
	%eof           reduce using rule 3


State 50

	Exprs -> Expr Exprs .                               (rule 22)

	')'            reduce using rule 22


State 51

	Expr -> '-' . Expr                                  (rule 7)
	Expr -> Expr '-' . Expr                             (rule 9)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 60

State 52

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)
	Patern -> Expr . ':' Expr                           (rule 26)

	':'            shift, and enter state 59
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            shift, and enter state 24
	'^'            shift, and enter state 25


State 53

	Expr -> case Expr of Paterns . '_' ':' Expr         (rule 2)

	'_'            shift, and enter state 58


State 54

	Paterns -> Patern . Paterns                         (rule 24)
	Paterns -> Patern .                                 (rule 25)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'_'            reduce using rule 25
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 52
	Paterns        goto state 57
	Patern         goto state 54

State 55

	Expr -> let var '=' Expr . in Expr                  (rule 1)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)

	in             shift, and enter state 56
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            shift, and enter state 24
	'^'            shift, and enter state 25


State 56

	Expr -> let var '=' Expr in . Expr                  (rule 1)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 68

State 57

	Paterns -> Patern Paterns .                         (rule 24)

	'_'            reduce using rule 24


State 58

	Expr -> case Expr of Paterns '_' . ':' Expr         (rule 2)

	':'            shift, and enter state 67


State 59

	Patern -> Expr ':' . Expr                           (rule 26)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 66

State 60

	Expr -> '-' Expr .                                  (rule 7)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr '-' Expr .                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)

	let            reduce using rule 7
			(reduce using rule 9)

	case           reduce using rule 7
			(reduce using rule 9)

	int            reduce using rule 7
			(reduce using rule 9)

	bool           reduce using rule 7
			(reduce using rule 9)

	var            reduce using rule 7
			(reduce using rule 9)

	func           reduce using rule 7
			(reduce using rule 9)

	')'            reduce using rule 7
			(reduce using rule 9)

	'['            reduce using rule 7
			(reduce using rule 9)

	'+'            reduce using rule 7
			(reduce using rule 9)

	'-'            reduce using rule 7
			(reduce using rule 9)

	'*'            reduce using rule 7
	'/'            reduce using rule 7
	'!'            reduce using rule 7
			(reduce using rule 9)

	'&'            reduce using rule 7
	'|'            reduce using rule 7
	'%'            reduce using rule 7
	'^'            reduce using rule 7


State 61

	Expr -> func '(' FuncVars ')' '{' . Expr '}'        (rule 5)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 65

State 62

	Expr -> func '(' ')' '{' Expr . '}'                 (rule 6)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)

	'}'            shift, and enter state 64
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            shift, and enter state 24
	'^'            shift, and enter state 25


State 63

	Expr -> '[' Expr ',' Expr ']' .                     (rule 21)

	let            reduce using rule 21
	in             reduce using rule 21
	case           reduce using rule 21
	of             reduce using rule 21
	int            reduce using rule 21
	bool           reduce using rule 21
	var            reduce using rule 21
	func           reduce using rule 21
	')'            reduce using rule 21
	'}'            reduce using rule 21
	'['            reduce using rule 21
	']'            reduce using rule 21
	':'            reduce using rule 21
	','            reduce using rule 21
	'_'            reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	'!'            reduce using rule 21
	'&'            reduce using rule 21
	'|'            reduce using rule 21
	'%'            reduce using rule 21
	'^'            reduce using rule 21
	%eof           reduce using rule 21


State 64

	Expr -> func '(' ')' '{' Expr '}' .                 (rule 6)

	let            reduce using rule 6
	in             reduce using rule 6
	case           reduce using rule 6
	of             reduce using rule 6
	int            reduce using rule 6
	bool           reduce using rule 6
	var            reduce using rule 6
	func           reduce using rule 6
	')'            reduce using rule 6
	'}'            reduce using rule 6
	'['            reduce using rule 6
	']'            reduce using rule 6
	':'            reduce using rule 6
	','            reduce using rule 6
	'_'            reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	'!'            reduce using rule 6
	'&'            reduce using rule 6
	'|'            reduce using rule 6
	'%'            reduce using rule 6
	'^'            reduce using rule 6
	%eof           reduce using rule 6


State 65

	Expr -> func '(' FuncVars ')' '{' Expr . '}'        (rule 5)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)

	'}'            shift, and enter state 70
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            shift, and enter state 24
	'^'            shift, and enter state 25


State 66

	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)
	Patern -> Expr ':' Expr .                           (rule 26)

	let            reduce using rule 26
	case           reduce using rule 26
	int            reduce using rule 26
	bool           reduce using rule 26
	var            reduce using rule 26
	func           reduce using rule 26
	'['            reduce using rule 26
	'_'            reduce using rule 26
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
			(reduce using rule 26)

	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	'!'            reduce using rule 26
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            shift, and enter state 24
	'^'            shift, and enter state 25


State 67

	Expr -> case Expr of Paterns '_' ':' . Expr         (rule 2)

	let            shift, and enter state 2
	case           shift, and enter state 4
	int            shift, and enter state 5
	bool           shift, and enter state 6
	var            shift, and enter state 7
	func           shift, and enter state 8
	'['            shift, and enter state 9
	'-'            shift, and enter state 10
	'!'            shift, and enter state 11

	Expr           goto state 69

State 68

	Expr -> let var '=' Expr in Expr .                  (rule 1)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)

	let            reduce using rule 1
	in             reduce using rule 1
	case           reduce using rule 1
	of             reduce using rule 1
	int            reduce using rule 1
	bool           reduce using rule 1
	var            reduce using rule 1
	func           reduce using rule 1
	')'            reduce using rule 1
	'}'            reduce using rule 1
	'['            reduce using rule 1
	']'            reduce using rule 1
	':'            reduce using rule 1
	','            reduce using rule 1
	'_'            reduce using rule 1
	'+'            shift, and enter state 18
	'-'            shift, and enter state 19
	'*'            shift, and enter state 20
	'/'            shift, and enter state 21
	'!'            reduce using rule 1
	'&'            shift, and enter state 22
	'|'            shift, and enter state 23
	'%'            shift, and enter state 24
	'^'            shift, and enter state 25
	%eof           reduce using rule 1


State 69

	Expr -> case Expr of Paterns '_' ':' Expr .         (rule 2)
	Expr -> Expr . '+' Expr                             (rule 8)
	Expr -> Expr . '-' Expr                             (rule 9)
	Expr -> Expr . '*' Expr                             (rule 10)
	Expr -> Expr . '/' Expr                             (rule 11)
	Expr -> Expr . '%' Expr                             (rule 12)
	Expr -> Expr . '^' Expr                             (rule 13)
	Expr -> Expr . '&' Expr                             (rule 15)
	Expr -> Expr . '|' Expr                             (rule 16)

	let            reduce using rule 2
	in             reduce using rule 2
	case           reduce using rule 2
	of             reduce using rule 2
	int            reduce using rule 2
	bool           reduce using rule 2
	var            reduce using rule 2
	func           reduce using rule 2
	')'            reduce using rule 2
	'}'            reduce using rule 2
	'['            reduce using rule 2
	']'            reduce using rule 2
	':'            reduce using rule 2
	','            reduce using rule 2
	'_'            reduce using rule 2
	'+'            shift, and enter state 18
			(reduce using rule 2)

	'-'            shift, and enter state 19
			(reduce using rule 2)

	'*'            shift, and enter state 20
			(reduce using rule 2)

	'/'            shift, and enter state 21
			(reduce using rule 2)

	'!'            reduce using rule 2
	'&'            shift, and enter state 22
			(reduce using rule 2)

	'|'            shift, and enter state 23
			(reduce using rule 2)

	'%'            shift, and enter state 24
			(reduce using rule 2)

	'^'            shift, and enter state 25
			(reduce using rule 2)

	%eof           reduce using rule 2


State 70

	Expr -> func '(' FuncVars ')' '{' Expr '}' .        (rule 5)

	let            reduce using rule 5
	in             reduce using rule 5
	case           reduce using rule 5
	of             reduce using rule 5
	int            reduce using rule 5
	bool           reduce using rule 5
	var            reduce using rule 5
	func           reduce using rule 5
	')'            reduce using rule 5
	'}'            reduce using rule 5
	'['            reduce using rule 5
	']'            reduce using rule 5
	':'            reduce using rule 5
	','            reduce using rule 5
	'_'            reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	'!'            reduce using rule 5
	'&'            reduce using rule 5
	'|'            reduce using rule 5
	'%'            reduce using rule 5
	'^'            reduce using rule 5
	%eof           reduce using rule 5


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 29
Number of terminals: 27
Number of non-terminals: 6
Number of states: 71
