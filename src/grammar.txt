{-
    Nom du fichier : grammar.txt
    Auteurs :
        - Nelson Jeanrenaud
        - Alice Grunder
-}

INT -> [+|-][0-9]+

BOOL -> true | false

VARIABLE_NAME -> [a-z][0-9a-zA-Z_']*

FUNCTION_NAME -> [A-Z][0-9a-zA-Z_']*

variable -> VARIABLE_NAME

littéral -> INT | BOOL | tuple

tuple -> '[' expression ',' expression ']'

unaire -> [-|!] operand 

binaire -> operand [&|'|'|+|-|*|/|%|^] operand

operand -> variable | littéral

declaration -> variable = littéral

functionDeclaration -> FUNCTION_NAME '(' {variable} ')' '{' expression '}'

functionCall -> FUNCTION_NAME '(' {expression} ')'

expression -> 
    operand
    | unaire
    | binaire 
    | declaration
    | let declaration in expression 
    | case expression of { expression ':' expression } '_' expression
    | functionCall

statement -> 
    declaration
    | functionDeclaration

